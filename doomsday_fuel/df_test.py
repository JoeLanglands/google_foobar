from doomsday_fuel import solution
import unittest

class TestDoomsdayFuel(unittest.TestCase):
    """Unit test class for doomsday_fuel.py.

    I found these test cases online in order to test my code. I found two
    sets hence why the assertion style changes after test_10.
    """
    def test_1(self):
        self.assertEqual(
            solution([
                [0, 2, 1, 0, 0],
                [0, 0, 0, 3, 4],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0]
            ]),
            [7, 6, 8, 21]
        )

    def test_2(self):
        self.assertEqual(
            solution([
                [0, 1, 0, 0, 0, 1],
                [4, 0, 0, 3, 2, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0]
            ]),
            [0, 3, 2, 9, 14]
        )

    def test_3(self):
        self.assertEqual(
            solution([
                [1, 2, 3, 0, 0, 0],
                [4, 5, 6, 0, 0, 0],
                [7, 8, 9, 1, 0, 0],
                [0, 0, 0, 0, 1, 2],
                [0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0]
            ]),
            [1, 2, 3]
        )

    def test_4(self):
        self.assertEqual(
            solution([
                [0]
            ]),
            [1, 1]
        )

    def test_5(self):
        self.assertEqual(
            solution([
                [0, 0, 12, 0, 15, 0, 0, 0, 1, 8],
                [0, 0, 60, 0, 0, 7, 13, 0, 0, 0],
                [0, 15, 0, 8, 7, 0, 0, 1, 9, 0],
                [23, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                [37, 35, 0, 0, 0, 0, 3, 21, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]),
            [1, 2, 3, 4, 5, 15]
        )

    def test_6(self):
        self.assertEqual(
            solution([
                [0, 7, 0, 17, 0, 1, 0, 5, 0, 2],
                [0, 0, 29, 0, 28, 0, 3, 0, 16, 0],
                [0, 3, 0, 0, 0, 1, 0, 0, 0, 0],
                [48, 0, 3, 0, 0, 0, 17, 0, 0, 0],
                [0, 6, 0, 0, 0, 1, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]),
            [4, 5, 5, 4, 2, 20]
        )

    def test_7(self):
        self.assertEqual(
            solution([
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]),
            [1, 1, 1, 1, 1, 5]
        )

    def test_8(self):
        self.assertEqual(
            solution([
                [1, 1, 1, 0, 1, 0, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 1, 1, 1, 0, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1, 1, 1, 0, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1, 0, 1, 1, 1, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]),
            [2, 1, 1, 1, 1, 6]
        )

    def test_9(self):
        self.assertEqual(
            solution([
                [0, 86, 61, 189, 0, 18, 12, 33, 66, 39],
                [0, 0, 2, 0, 0, 1, 0, 0, 0, 0],
                [15, 187, 0, 0, 18, 23, 0, 0, 0, 0],
                [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]),
            [6, 44, 4, 11, 22, 13, 100]
        )

    def test_10(self):
        self.assertEqual(
            solution([
                [0, 0, 0, 0, 3, 5, 0, 0, 0, 2],
                [0, 0, 4, 0, 0, 0, 1, 0, 0, 0],
                [0, 0, 0, 4, 4, 0, 0, 0, 1, 1],
                [13, 0, 0, 0, 0, 0, 2, 0, 0, 0],
                [0, 1, 8, 7, 0, 0, 0, 1, 3, 0],
                [1, 7, 0, 0, 0, 0, 0, 2, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            ]),
            [1, 1, 1, 2, 5]
        )

    def test_11(self):
        test_input = [
            [0, 2, 1, 0, 0],
            [0, 0, 0, 3, 4],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]
        ]
        self.assertEqual(solution(test_input),
                         [7, 6, 8, 21])

    def test_12(self):
        test_input = [
            [0, 1, 0, 0, 0, 1],
            [4, 0, 0, 3, 2, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ]
        self.assertEqual(solution(test_input), [0, 3, 2, 9, 14])

    def test_13(self):
        test_input = [
            [0, 1, 0, 0, 0, 1],
            [1, 0, 0, 1, 1, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0]
        ]
        self.assertEqual(solution(test_input), [0, 1, 1, 3, 5])

    def test_14(self):
        test_input = [
            [1, 1, 0, 1],
            [1, 1, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ]
        self.assertEqual(solution(test_input), [0, 1, 1])

    def test_15(self):
        test_input = [
            [0, 0, 0, 0],
            [1, 1, 1, 1],
            [1, 1, 1, 1],
            [1, 1, 1, 1]
        ]
        self.assertEqual(solution(test_input), [1, 1])

if __name__=='__main__':
    unittest.main()
